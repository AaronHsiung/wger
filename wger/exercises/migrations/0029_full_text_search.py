# Generated by Django 4.2.6 on 2024-01-18 16:55

import django.contrib.postgres.search
from django.db import migrations, models


def forwards(apps, schema_editor):
    if not schema_editor.connection.vendor.startswith('postgres'):
        return

    schema_editor.execute('''
    CREATE OR REPLACE FUNCTION update_exercise_fulltext_index() RETURNS trigger AS $$
    DECLARE
        aliases     TEXT;
        known_langs TEXT[];
    BEGIN
        SELECT ARRAY(SELECT cfgname FROM pg_ts_config) INTO known_langs;

        IF NEW.language_id IS NOT NULL THEN
            SELECT lower(full_name_en)
            INTO NEW.index_language
            FROM core_language
            WHERE id = NEW.language_id;

            -- If the language is not known, just use English
            IF NEW.index_language IS NULL OR NEW.index_language NOT IN (SELECT unnest(known_langs)) THEN
                NEW.index_language = 'english';
            END IF;
        ELSE
            -- If language_id is NULL, just set to English
            NEW.index_language = 'english';
        END IF;

        SELECT COALESCE(string_agg(a.alias, ' '), '')
        INTO aliases
        FROM exercises_exercise AS t
        LEFT JOIN exercises_alias AS a
        ON t.id = a.exercise_id
        WHERE a.exercise_id = NEW.id;

        NEW.search_column :=
            setweight(to_tsvector(NEW.index_language::regconfig, coalesce(new.name, '')), 'A') ||
            setweight(to_tsvector(NEW.index_language::regconfig, coalesce(aliases, '')), 'A') ||
            setweight(to_tsvector(NEW.index_language::regconfig, coalesce(new.description, '')), 'D');

        RETURN NEW;
    END
    $$ LANGUAGE plpgsql;

    -- Create the trigger
    CREATE OR REPLACE TRIGGER exercise_search_column_trigger
    BEFORE INSERT OR UPDATE
    ON exercises_exercise
    FOR EACH ROW EXECUTE FUNCTION
        update_exercise_fulltext_index();

    -- Force an update of the search index
    UPDATE exercises_exercise SET name = name WHERE true;
    ''')


def backwards(apps, schema_editor):
    if not schema_editor.connection.vendor.startswith('postgres'):
        return

    schema_editor.execute('''
        DROP TRIGGER IF EXISTS exercise_search_column_trigger ON exercises_exercise;
        DROP FUNCTION IF EXISTS update_exercise_fulltext_index();
    ''')


class Migration(migrations.Migration):
    dependencies = [
        ('exercises', '0028_add_uuid_alias_and_comments'),
    ]

    operations = [
        migrations.AddField(
            model_name='exercise',
            name='index_language',
            field=models.CharField(default='english', editable=False, max_length=30),
        ),
        migrations.AddField(
            model_name='exercise',
            name='search_column',
            field=django.contrib.postgres.search.SearchVectorField(editable=False, null=True),
        ),
        migrations.AddField(
            model_name='historicalexercise',
            name='index_language',
            field=models.CharField(default='english', editable=False, max_length=30),
        ),
        migrations.AddField(
            model_name='historicalexercise',
            name='search_column',
            field=django.contrib.postgres.search.SearchVectorField(editable=False, null=True),
        ),
        migrations.RunPython(forwards, backwards)
    ]
