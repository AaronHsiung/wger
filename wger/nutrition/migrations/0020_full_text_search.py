# Generated by Django 3.2.15 on 2022-12-07 19:31

import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models


def forwards(apps, schema_editor):
    if not schema_editor.connection.vendor.startswith('postgres'):
        return

    schema_editor.execute('''
        CREATE OR REPLACE FUNCTION update_ingredient_index() RETURNS trigger AS $$
        DECLARE
            known_values TEXT[];
        BEGIN
            SELECT ARRAY(SELECT cfgname FROM pg_ts_config) INTO known_values;

            -- Map the ingredient language to the list of known languages
            IF NEW.language_id IS NOT NULL THEN
            SELECT lower(full_name_en) INTO NEW.index_language
                FROM core_language
                WHERE id = NEW.language_id;

                -- If the language is not known values, just use English
                IF NEW.index_language IS NULL OR NEW.index_language NOT IN (SELECT unnest(known_values)) THEN
                    NEW.index_language = 'english';
                END IF;
            ELSE
                -- If language_id is NULL, just set to English
                NEW.index_language = 'english';
            END IF;

            NEW.search_column :=
                setweight(to_tsvector(NEW.index_language::regconfig, coalesce(new.name,'')), 'A') ||
                setweight(to_tsvector(NEW.index_language::regconfig, coalesce(new.brand,'')), 'B')||
                setweight(to_tsvector(NEW.index_language::regconfig, coalesce(new.common_name,'')), 'C');

            RETURN NEW;
        END
        $$ LANGUAGE plpgsql;

        -- Create the trigger
        CREATE OR REPLACE TRIGGER ingredient_search_column_trigger
        BEFORE INSERT OR UPDATE
        ON nutrition_ingredient
        FOR EACH ROW EXECUTE FUNCTION
            update_ingredient_index();

        -- Force an update of the search index
        UPDATE nutrition_ingredient SET name = name WHERE true;
        ''')


def backwards(apps, schema_editor):
    if not schema_editor.connection.vendor.startswith('postgres'):
        return

    schema_editor.execute('''
        DROP TRIGGER IF EXISTS ingredient_search_column_trigger ON nutrition_ingredient;
        DROP FUNCTION IF EXISTS update_ingredient_index();
    ''')


class Migration(migrations.Migration):
    dependencies = [
        ('nutrition', '0019_alter_image_license_author_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='ingredient',
            name='index_language',
            field=models.CharField(default='english', editable=False, max_length=30),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='search_column',
            field=django.contrib.postgres.search.SearchVectorField(editable=False, null=True),
        ),
        migrations.AddIndex(
            model_name='ingredient',
            index=django.contrib.postgres.indexes.GinIndex(
                fields=['search_column'],
                name='nutrition_i_search__f274b7_gin'
            ),
        ),
        migrations.RunPython(forwards, backwards)
    ]
